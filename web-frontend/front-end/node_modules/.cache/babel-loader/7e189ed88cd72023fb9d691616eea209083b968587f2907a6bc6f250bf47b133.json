{"ast":null,"code":"var _jsxFileName = \"D:\\\\UT-Second-Year\\\\JustEatTakeAway\\\\web-frontend\\\\front-end\\\\src\\\\pages\\\\result-page\\\\index.js\",\n  _s = $RefreshSig$();\nimport Navigator from \"./components/Navigator/nav\";\nimport Search from \"./components/Search/search\";\nimport Item from \"./components/Item/item\";\nimport { useEffect, useState } from \"react\";\nimport { Container, Stack } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getRestaurantList } from \"../../store/modules/restaurantStore\";\nimport { Outlet } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Result = () => {\n  _s();\n  const dispatch = useDispatch();\n  const restaurantList = useSelector(state => state.restaurant.restaurantList);\n\n  // const [currentPage, setCurrentPage] = useState(1);\n  // const [totalPages, setTotalPages] = useState(0);\n  // const ITEMS_PER_PAGE = 10\n\n  useEffect(() => {\n    dispatch(getRestaurantList());\n  }, [dispatch]);\n  console.log(\"Hello\");\n  console.log(restaurantList);\n  const firstHalf = restaurantList.slice(0, 5);\n  const secondHalf = restaurantList.slice(5, 10);\n  console.log(restaurantList);\n  console.log(secondHalf);\n\n  // useEffect(() => {\n  //     if (restaurantList.length > 0) {\n  //       setTotalPages(Math.ceil(restaurantList.length / ITEMS_PER_PAGE));\n  //     }\n  //   }, [restaurantList]);\n\n  // const currentPageData = restaurantList.slice(\n  //     (currentPage - 1) * ITEMS_PER_PAGE,\n  //     currentPage * ITEMS_PER_PAGE\n  // );\n\n  // const changePage = (newPage) => {\n  //     if (newPage > 0 && newPage <= totalPages) {\n  //       setCurrentPage(newPage);\n  //     }\n  // };\n\n  // const firstHalf = currentPageData.slice(0, 5);\n  // const secondHalf = currentPageData.slice(5, 10);\n\n  // The result page needs:\n  //1. put in all the elements that I constructed before\n\n  //Function:\n  //2. separate the content into different pages\n  //3. connect the content of one page to its page number\n  //4. display \"there is no restaurants\" if the list is empty\n  //5. same function as the landing page for search bar here\n  //6. click the picture go to the landing page\n  //7. sort the items and render them based on their different attributes\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"result-page\",\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Navigator, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Stack, {\n      direction: \"horizontal\",\n      gap: 3\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n_s(Result, \"YNzeQRjG8jgEh8/rv1kgZotwvVo=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Result;\nexport default Result;\nvar _c;\n$RefreshReg$(_c, \"Result\");","map":{"version":3,"names":["Navigator","Search","Item","useEffect","useState","Container","Stack","useDispatch","useSelector","getRestaurantList","Outlet","jsxDEV","_jsxDEV","Result","_s","dispatch","restaurantList","state","restaurant","console","log","firstHalf","slice","secondHalf","className","children","fileName","_jsxFileName","lineNumber","columnNumber","direction","gap","_c","$RefreshReg$"],"sources":["D:/UT-Second-Year/JustEatTakeAway/web-frontend/front-end/src/pages/result-page/index.js"],"sourcesContent":["import Navigator from \"./components/Navigator/nav\"\r\nimport Search from \"./components/Search/search\"\r\nimport Item from \"./components/Item/item\"\r\nimport { useEffect,useState} from \"react\"\r\nimport {Container, Stack} from 'react-bootstrap'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport { getRestaurantList } from \"../../store/modules/restaurantStore\"\r\nimport { Outlet } from \"react-router-dom\"\r\n\r\n\r\nconst Result = () => {\r\n    const dispatch = useDispatch()\r\n    const restaurantList = useSelector(state => state.restaurant.restaurantList);\r\n    \r\n    // const [currentPage, setCurrentPage] = useState(1);\r\n    // const [totalPages, setTotalPages] = useState(0);\r\n    // const ITEMS_PER_PAGE = 10\r\n\r\n    useEffect(()=>{\r\n        dispatch(getRestaurantList())\r\n    }, [dispatch])\r\n\r\n    console.log(\"Hello\")\r\n    console.log(restaurantList)\r\n\r\n\r\n    const firstHalf = restaurantList.slice(0, 5);\r\n    const secondHalf = restaurantList.slice(5, 10);\r\n    console.log(restaurantList)\r\n    console.log(secondHalf)\r\n\r\n    // useEffect(() => {\r\n    //     if (restaurantList.length > 0) {\r\n    //       setTotalPages(Math.ceil(restaurantList.length / ITEMS_PER_PAGE));\r\n    //     }\r\n    //   }, [restaurantList]);\r\n\r\n    // const currentPageData = restaurantList.slice(\r\n    //     (currentPage - 1) * ITEMS_PER_PAGE,\r\n    //     currentPage * ITEMS_PER_PAGE\r\n    // );\r\n    \r\n    // const changePage = (newPage) => {\r\n    //     if (newPage > 0 && newPage <= totalPages) {\r\n    //       setCurrentPage(newPage);\r\n    //     }\r\n    // };\r\n\r\n    // const firstHalf = currentPageData.slice(0, 5);\r\n    // const secondHalf = currentPageData.slice(5, 10);\r\n  \r\n    \r\n\r\n\r\n    // The result page needs:\r\n    //1. put in all the elements that I constructed before\r\n\r\n    //Function:\r\n    //2. separate the content into different pages\r\n    //3. connect the content of one page to its page number\r\n    //4. display \"there is no restaurants\" if the list is empty\r\n    //5. same function as the landing page for search bar here\r\n    //6. click the picture go to the landing page\r\n    //7. sort the items and render them based on their different attributes\r\n    return (\r\n        <div className=\"result-page\">\r\n            <Container>\r\n                <Outlet /> \r\n            </Container>\r\n            \r\n            <Navigator></Navigator>\r\n\r\n            <Search />\r\n\r\n            <Stack direction=\"horizontal\" gap={3}>\r\n                {/* This maps through the first 5 elements\r\n                <Stack>\r\n                    <Item firstHalf={\"\"}></Item>\r\n                </Stack>\r\n                {/* This maps through the next 5 elements\r\n                <Stack>\r\n                    <Item secondPart = {\"\"}></Item> \r\n                </Stack>*/}\r\n            </Stack>\r\n\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Result"],"mappings":";;AAAA,OAAOA,SAAS,MAAM,4BAA4B;AAClD,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,IAAI,MAAM,wBAAwB;AACzC,SAASC,SAAS,EAACC,QAAQ,QAAO,OAAO;AACzC,SAAQC,SAAS,EAAEC,KAAK,QAAO,iBAAiB;AAChD,SAAQC,WAAW,EAAEC,WAAW,QAAO,aAAa;AACpD,SAASC,iBAAiB,QAAQ,qCAAqC;AACvE,SAASC,MAAM,QAAQ,kBAAkB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGzC,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B,MAAMS,cAAc,GAAGR,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACC,UAAU,CAACF,cAAc,CAAC;;EAE5E;EACA;EACA;;EAEAb,SAAS,CAAC,MAAI;IACVY,QAAQ,CAACN,iBAAiB,CAAC,CAAC,CAAC;EACjC,CAAC,EAAE,CAACM,QAAQ,CAAC,CAAC;EAEdI,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;EACpBD,OAAO,CAACC,GAAG,CAACJ,cAAc,CAAC;EAG3B,MAAMK,SAAS,GAAGL,cAAc,CAACM,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EAC5C,MAAMC,UAAU,GAAGP,cAAc,CAACM,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;EAC9CH,OAAO,CAACC,GAAG,CAACJ,cAAc,CAAC;EAC3BG,OAAO,CAACC,GAAG,CAACG,UAAU,CAAC;;EAEvB;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAKA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,oBACIX,OAAA;IAAKY,SAAS,EAAC,aAAa;IAAAC,QAAA,gBACxBb,OAAA,CAACP,SAAS;MAAAoB,QAAA,eACNb,OAAA,CAACF,MAAM;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAEZjB,OAAA,CAACZ,SAAS;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eAEvBjB,OAAA,CAACX,MAAM;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEVjB,OAAA,CAACN,KAAK;MAACwB,SAAS,EAAC,YAAY;MAACC,GAAG,EAAE;IAAE;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAS9B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEP,CAAC;AAGd,CAAC;AAAAf,EAAA,CA9EKD,MAAM;EAAA,QACSN,WAAW,EACLC,WAAW;AAAA;AAAAwB,EAAA,GAFhCnB,MAAM;AAgFZ,eAAeA,MAAM;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}